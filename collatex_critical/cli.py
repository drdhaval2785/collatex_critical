import argparse
import os
from . import collatex_critical
from .batch import run_batch
from .generate import run_generate

def main():
    parser = argparse.ArgumentParser(prog="collatex-critical")
    subparsers = parser.add_subparsers(dest="command", required=True)

    # Single
    p1 = subparsers.add_parser("single", help="Run on a single input/output")
    p1.add_argument("-i", "--input-file", required=True, help="Input json file generated by collatex")
    p1.add_argument("-o", "--output-file", required=True, help="Markdown file to store results")
    p1.add_argument("-f", "--from-transliteration", required=True, help="input transliteration scheme")
    p1.add_argument("-t", "--to-transliteration", required=True, help="output transliteration scheme")

    # Batch
    p2 = subparsers.add_parser("batch", help="Create markdown files for all transliteration schemes for given project_id")
    p2.add_argument("project_id", help="Usually the name of your project")
    p2.add_argument(
        "-t",
        "--transliterations",
        type=lambda s: s.split(","),  # comma-separated
        default=None,
        help="Comma-separated list of transliterations (default: devanagari,slp1,iast)",
    )

    # Generate
    p3 = subparsers.add_parser("generate", help="Full pipeline replacement for generate.sh")
    p3.add_argument("project_id", help="Usually the name of your project")
    p3.add_argument(
        "-t",
        "--transliterations",
        type=lambda s: s.split(","),  # comma-separated
        default=None,
        help="Comma-separated list of transliterations (default: devanagari,slp1,iast)",
    )

    args = parser.parse_args()

    if args.command == "single":
        collatex_critical(args.input, args.output, args.from_transliteration, args.to_transliteration)
    elif args.command == "generate":
        run_generate(args.project_id, translits=args.transliterations)
    elif args.command == "batch":
        run_batch(args.project_id, translits=args.transliterations)
